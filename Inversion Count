import java.io.*;
import java.util.*;
import java.text.*;
import java.math.*;
import java.util.regex.*;

public class Solution {
    
    public static int inversionCount(int[] arr){
        return inversionCount(arr, 0, arr.length - 1);
    }
    
    public static int inversionCount(int[] arr, int start, int end){
        if(start < end){
            int mid = (start + end) / 2;
            return inversionCount(arr, start , mid) +  inversionCount(arr, mid + 1, end) + merge(arr, start, mid, end);
        }else{
            return 0;
        }
    }
    
    public static int merge(int[] arr, int start, int mid, int end){
        int invCount = 0;
        int n1 = mid - start + 1;
        int n2 = end - mid;
        
        int[] temp1 = new int[n1];
        int[] temp2 = new int[n2];
        
        for(int i = 0 ; i < n1 ; i++){
            temp1[i] = arr[start + i];
        }
        
        for(int j = 0 ; j < n2 ; j++){
            temp2[j] = arr[mid + j + 1];
        }
        
        int i = 0, j = 0, k = start;
        
        while(i < n1 && j < n2){
            if(temp1[i] <= temp2[j]){
                arr[k++] = temp1[i++];
            }else{
                arr[k++] = temp2[j++];
                invCount = invCount + (n1 - i);
            }
         }
            
            while(i < n1){
                arr[k++] = temp1[i++];
            }
            
            while(j < n2){
                arr[k++] = temp2[j++];
            }
        
        return invCount;
    }
    
    public static void main(String[] args) {
        Scanner in = new Scanner(System.in);
        int t = in.nextInt();
        for(int a0 = 0; a0 < t; a0++){
            int n = in.nextInt();
            int arr[] = new int[n];
            for(int arr_i=0; arr_i < n; arr_i++){
                arr[arr_i] = in.nextInt();
            }
            //System.out.println(Arrays.toString(arr));
            System.out.println(inversionCount(arr));
        }
    }
}
